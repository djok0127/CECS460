



; REGISTERS
NEW_LINE		EQU		R0
CHARACTERS 		EQU		R1
TEMP_CHAR		EQU		R2
COUNTER			EQU		R3
C_D				EQU 	R4
LED_OUTPUT		EQU		R5

START			
				LOAD NEW_LINE,	0001 	; R1 <- 0001
				LOAD TEMP_CHAR, 0000 	; R2 <- 0000
				LOAD C_D,		0001
				
				; LOAD CHARACTERS
				LOAD CHARACTERS, 0043   ; <- "C"
				STORE CHARACTERS, 0000
				
				LOAD CHARACTERS, 0053   ; <- "S"
				STORE CHARACTERS, 0001
				
				LOAD CHARACTERS, 0055   ; <- "U"
				STORE CHARACTERS, 0002
				
				LOAD CHARACTERS, 004C   ; <- "L"
				STORE CHARACTERS, 0003
				
				LOAD CHARACTERS, 0042   ; <- "B"
				STORE CHARACTERS, 0004
				
				LOAD CHARACTERS, 0020   ; <- " "
				STORE CHARACTERS, 0005
				
				LOAD CHARACTERS, 0043   ; <- "C"
				STORE CHARACTERS, 0006
				
				LOAD CHARACTERS, 0045   ; <- "E"
				STORE CHARACTERS, 0007
				
				LOAD CHARACTERS, 0043   ; <- "C"
				STORE CHARACTERS, 0008
				
				LOAD CHARACTERS, 0053   ; <- "S"
				STORE CHARACTERS, 0009
				
				LOAD CHARACTERS, 0020   ; <- " "
				STORE CHARACTERS, 000A
				
				LOAD CHARACTERS, 0034   ; <- "4"
				STORE CHARACTERS, 000B
				
				LOAD CHARACTERS, 0036   ; <- "6"
				STORE CHARACTERS, 000C
				
				LOAD CHARACTERS, 0030   ; <- "0"
				STORE CHARACTERS, 000D
				
				LOAD CHARACTERS, 0020   ; <- " "
				STORE CHARACTERS, 000E
				
				LOAD CHARACTERS, 0030   ; <- "0"
				STORE CHARACTERS, 000F
				
				LOAD CHARACTERS, 0030   ; <- "0"
				STORE CHARACTERS, 0010
				
				LOAD CHARACTERS, 0030   ; <- "0"
				STORE CHARACTERS, 0011
				
				LOAD CHARACTERS, 0030   ; <- "0"
				STORE CHARACTERS, 0012
				
				LOAD CHARACTERS, 0030   ; <- "0"
				STORE CHARACTERS, 0013
				
				LOAD CHARACTERS, 000D   ; <- "<CR>"
				STORE CHARACTERS, 0014
				
				LOAD CHARACTERS, 000A   ; <- "<LF>"
				STORE CHARACTERS, 0015
									
				ENINT

MAIN
				COMP NEW_LINE, 0000		; CHECK IF IT IS NEWLINE
				CALLZ COUNT
				
				COMP COUNTER, C_D
				CALLZ LED
				
				JUMP MAIN
				
				
			; ADRESS FOR BIN TO ASCII
			ADDRESS 0100
			
				
COUNT			
				CALL BIN_TO_ASCII
				LOAD NEW_LINE, 0001
				RETURN
				
LED
				OUTPUT LED_OUTPUT, 8001
				RL LED_OUTPUT				; ROTATE LEFT
				ADD C_D, 0001
				RETURN
				
BIN_TO_ASCII
				LOAD	RE, COUNTER ; R2 KEEPS COUNT
				LOAD	RD, 2710	; 10_000
				
				CALL	FIND_IT		; HOW MANY? RETURNS 0...9
				ADD		RB, 0030	; ADD FOR ASCII
				STORE	RB, 000F	; ADD 0030 FOR ASCII
				LOAD	RD, 03E8	; 1_000
				
				CALL	FIND_IT		; HOW MANY?
				ADD		RB, 0030	; MAKE ASCII
				STORE 	RB, 0010	; STORE
				LOAD	RD, 0064	; 100
				
				CALL	FIND_IT		; HOW MANY?
				ADD		RB, 0030	; ASCII
				STORE	RB,	0011	
				LOAD	RD, 000A	; 10
				
				CALL	FIND_IT		; HOW MANY?
				ADD		RB, 0030	; ASCII
				STORE	RB, 0011	; 1S LEFT
				ADD		RE, 0030	
				STORE	RE, 0002
				
				RETURN
				
				
			; ADDRESS FOR ISR
			ADDRESS 0200
				
FIND_IT			LOAD 	RB, 0000	; COUNT = 0
	
CN
				SUB  	RE, RD		; SUBTRACT RD FROM RE
				JUMPC	CY			; RESULT IS SAME
				ADD		RB, 0001	; ADD ONE 
				JUMPC 	CN			; GO BACK TO SUBTRACTION
CY
				ADD  	RE, RD		; RESTORE LAST VALUE
				RETURN
	
	
			; ISR ADDRESS
			ADDRESS 0300
				
ISR
				FETCH CHARACTERS, TEMP_CHAR
				OUTPUT CHARACTERS, 8000
				COMP TEMP_CHAR, 0015
				JUMPNZ LINE_FEED 		; JUMP TO LINE FEED IF LF IS NOT REACHED
				LOAD TEMP_CHAR, 0000	; R2 <- 0000
				ADD COUNTER, 0001 		; R3 <- R3 + 1
				LOAD NEW_LINE, 0000 	; R0 <- 0000
				RETEN
				
LINE_FEED		
				ADD TEMP_CHAR, 0001		; ADD TEMP_CHAR TO GO THROUGH THE CHARACTERS
				RETEN

; ISR VECTORED THORUGH 0FFE	
ENDIT	
				ADDRESS 0FFE
				JUMP ISR
				END
